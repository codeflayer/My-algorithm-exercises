package Math;

public class NumberOf1 {


    /**
     * 题目来源于 LeetCode 上第 191 号问题： 位 1 的个数。题目难度为 Easy，目前通过率为 52.3% 。
     * <p>
     * ### 题目描述
     * <p>
     * 编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为[汉明重量](https://baike.baidu.com/item/%E6%B1%89%E6%98%8E%E9%87%8D%E9%87%8F)）。
     * <p>
     * <p>
     * <p>
     * **示例 1：**
     * <p>
     * ```
     * 输入：00000000000000000000000000001011
     * 输出：3
     * 解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
     * ```
     * <p>
     * **示例 2：**
     * <p>
     * ```
     * 输入：00000000000000000000000010000000
     * 输出：1
     * 解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
     * ```
     * <p>
     * **示例 3：**
     * <p>
     * ```
     * 输入：11111111111111111111111111111101
     * 输出：31
     * 解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。
     * ```
     * <p>
     * <p>
     * <p>
     * **提示：**
     * <p>
     * - 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
     * - 在 Java 中，编译器使用[二进制补码](https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A5%E7%A0%81/5295284)记法来表示有符号整数。因此，在上面的 **示例 3** 中，输入表示有符号整数 `-3`。
     *
     * @param argu
     */
    public static void main(String[] argu) {

        int r = hammingWeight(8);
        System.out.println(r);
    }

    static int hammingWeight(Integer n) {
        int count = 0;
        while (n > 0) {
            count ++;
            n = n&(n-1);
        }
        return count;
    }

}
